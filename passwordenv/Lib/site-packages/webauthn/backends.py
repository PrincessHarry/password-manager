from django.contrib.auth import get_user_model
from django.db import IntegrityError  # For handling duplicate user creation
from fido2.webauthn import AttestedCredentialData
from webauthn.models import WebAuthnUser


class ModelBackend:
    """
    A storage backend for FIDO2 that handles user and credential management.
    """

    def __init__(self):
        self.user_model = get_user_model()

    def get_credential(self, username):
        """
        Retrieve the credential for the given username.
        """
        try:
            user = self.user_model.objects.get_by_natural_key(username).webauthn
            credential_data = AttestedCredentialData(
                user.credential_id,
                user.credential_public_key,
                None  # No attestation statement is required for retrieving
            )
            return credential_data
        except self.user_model.DoesNotExist:
            raise ValueError(f"User with username '{username}' does not exist.")
        except AttributeError:
            raise ValueError(f"No WebAuthn data associated with user '{username}'.")

    def save_credential(self, username, credential):
        """
        Save a user's credential data.
        """
        try:
            user = self.user_model.objects.get_by_natural_key(username).webauthn
            user.credential_id = credential.credential_id
            user.credential_public_key = bytes(credential.public_key)
            user.save()
        except self.user_model.DoesNotExist:
            raise ValueError(f"User with username '{username}' does not exist.")
        except AttributeError:
            raise ValueError(f"No WebAuthn data associated with user '{username}'.")

    def save_challenge(self, username, challenge, challenge_type, **user_extra):
        """
        Save a challenge for either registration or authentication.
        """
        assert challenge_type in {"registration", "authentication"}, "Invalid challenge type."

        if challenge_type == "registration":
            # Create a new WebAuthnUser for the registration challenge
            try:
                # Retrieve or create the user
                user, created = self.user_model.objects.get_or_create(
                    **{
                        self.user_model.USERNAME_FIELD: username,
                        **user_extra  # Include additional fields
                    }
                )

                if created:
                    # New user, create a WebAuthnUser entry
                    WebAuthnUser.objects.create(
                        user=user,
                        registration_challenge=challenge
                    )
                else:
                    # Existing user, update the registration challenge
                    webauthn_user = user.webauthn
                    webauthn_user.registration_challenge = challenge
                    webauthn_user.save()

            except IntegrityError:
                raise ValueError(f"User with username '{username}' already exists.")
        else:
            # Update the existing user's authentication challenge
            try:
                user = self.user_model.objects.get_by_natural_key(username).webauthn
                user.authentication_challenge = challenge
                user.save()
            except self.user_model.DoesNotExist:
                raise ValueError(f"User with username '{username}' does not exist.")
            except AttributeError:
                raise ValueError(f"No WebAuthn data associated with user '{username}'.")

    def get_challenge(self, username, challenge_type):
        """
        Retrieve the challenge for either registration or authentication.
        """
        assert challenge_type in {"registration", "authentication"}, "Invalid challenge type."

        try:
            user = self.user_model.objects.get_by_natural_key(username).webauthn
            return getattr(user, f"{challenge_type}_challenge")
        except self.user_model.DoesNotExist:
            raise ValueError(f"User with username '{username}' does not exist.")
        except AttributeError:
            raise ValueError(f"No WebAuthn data associated with user '{username}'.")
