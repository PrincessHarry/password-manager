import json

from django.db import IntegrityError
from django.http import JsonResponse
from django.utils.functional import cached_property
from django.views import View

from fido2.server import Fido2Server
from fido2.webauthn import PublicKeyCredentialRpEntity, PublicKeyCredentialUserEntity
from fido2.webauthn import AttestedCredentialData, AuthenticatorAssertionResponse

from .conf import settings
from .forms import CreateOptionsForm, RegistrationForm, VerifyForm


class BaseView(View):
    @cached_property
    def fido2_server(self):
        rp_entity = PublicKeyCredentialRpEntity(
            id=settings.WEBAUTHN_HOSTNAME,
            name=settings.WEBAUTHN_NAME
        )
        return Fido2Server(rp_entity)


class CredentialCreateOptionsView(BaseView):
    def post(self, request):
        form = CreateOptionsForm(json.loads(request.body))
        if not form.is_valid():
            return JsonResponse({'errors': form.errors.as_json()})

        fido2_server = self.fido2_server
        data = form.cleaned_data

        user = PublicKeyCredentialUserEntity(
            id=data['username'].encode(),
            name=data['username'],
            display_name=data.get('full_name', data['username'])
        )

        try:
            registration_data, state = fido2_server.register_begin(
                user, user_verification="preferred"
            )
        except IntegrityError:
            return JsonResponse({'errors': f'User "{data["username"]}" already exists.'})

        # Store `state` in the session or database to be used later in the register_complete step
        request.session['fido2_registration_state'] = state

        return JsonResponse(registration_data)


class RegisterCredentialView(BaseView):
    def post(self, request):
        form = RegistrationForm(json.loads(request.body))
        if not form.is_valid():
            return JsonResponse({'errors': form.errors.as_json()})

        fido2_server = self.fido2_server
        data = form.cleaned_data

        state = request.session.pop('fido2_registration_state', None)
        if state is None:
            return JsonResponse({'errors': 'No registration state found.'})

        try:
            attestation_object = json.loads(data.pop('attestation_object'))
            client_data = json.loads(data.pop('client_data_json'))
            attested_credential = fido2_server.register_complete(
                state, client_data, attestation_object
            )

            # Save `attested_credential` to the database for future authentication
            return JsonResponse({'success': True, 'credential_id': attested_credential.credential_id.hex()})
        except Exception as e:
            return JsonResponse({'errors': str(e)})


class CredentialGetOptionsView(BaseView):
    def post(self, request):
        form = CreateOptionsForm(json.loads(request.body))
        if not form.is_valid():
            return JsonResponse({'errors': form.errors.as_json()})

        fido2_server = self.fido2_server
        username = form.cleaned_data['username']

        # Retrieve user's credential from the database based on the username
        # Example: `stored_credential = get_credential_for_user(username)`
        stored_credential = None  # Replace with your implementation

        if not stored_credential:
            return JsonResponse({'errors': 'No credentials found for this user.'})

        auth_data, state = fido2_server.authenticate_begin(
            [stored_credential], user_verification="preferred"
        )

        # Store `state` in the session or database to be used later in the authenticate_complete step
        request.session['fido2_authentication_state'] = state

        return JsonResponse(auth_data)


class VerifyAssertionView(BaseView):
    def post(self, request):
        form = VerifyForm(json.loads(request.body))
        if not form.is_valid():
            return JsonResponse({'errors': form.errors.as_json()})

        fido2_server = self.fido2_server
        data = form.cleaned_data

        state = request.session.pop('fido2_authentication_state', None)
        if state is None:
            return JsonResponse({'errors': 'No authentication state found.'})

        try:
            credential_id = data['credential_id']
            client_data = json.loads(data['client_data_json'])
            authenticator_data = json.loads(data['authenticator_data'])
            signature = json.loads(data['signature'])

            # Retrieve the stored credential from the database
            # Example: `stored_credential = get_credential_by_id(credential_id)`
            stored_credential = None  # Replace with your implementation

            if not stored_credential:
                return JsonResponse({'errors': 'No matching credential found.'})

            fido2_server.authenticate_complete(
                state,
                [stored_credential],
                credential_id,
                client_data,
                authenticator_data,
                signature
            )

            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'errors': str(e)})
